---
interface Props {
  each: string[] | object[] | object;
  self?: boolean;
}

const { each, self } = Astro.props as Props;

let memorySafeCounter = 0;

let html = "";
let loopedItems;

let startTime = performance.now();


console.log(each)
async function forloop(each) {  
  
  if (Astro.slots.has("default")) {
    for (let i = 0; i < each.length; i++) {
      if (self && memorySafeCounter < 10) {
        if (Array.isArray(each[i].items)) {
          memorySafeCounter++;
          html += await forloop(each[i].items);
        }
      }
      html += await Astro.slots.render("default", [each[i]]);
    }
  }
  return html;
}

  let endTime = performance.now();
  const timeDiff = endTime - startTime;
  const roundedTimeDiff = timeDiff.toFixed(7); // Round to 7 decimal places
  console.log(`Execution time: ${roundedTimeDiff}ms`);
---

<Fragment set:html={forloop(each)} />