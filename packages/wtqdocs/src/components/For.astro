---
interface Props {
  each: string[] | object[] | object;
  self?: boolean;
}

const { each, self } = Astro.props as Props;

let memorySafeCounter = 0;

let html = "";
let loopedItems;
async function forloop() {
  if (Astro.slots.has("default")) {
    if (typeof each === "object" && each !== null) {
      loopedItems = Object.values(each).map((item) => item);
    } else if (Array.isArray(each) && each !== null) {
      loopedItems = each?.map((item) => item);
    } else {
      throw new Error("invaild prop value, pass array or an object");
    }

    for (let i = 0; i < loopedItems.length; i++) {
      if (self && memorySafeCounter < 10) {
        if (Array.isArray(loopedItems[i].items)) {
          memorySafeCounter++;
          forloop();
        }
      }
      html += await Astro.slots.render("default", [loopedItems[i]]);
    }
  }
  return html;
}
---

<Fragment set:html={forloop()} />
