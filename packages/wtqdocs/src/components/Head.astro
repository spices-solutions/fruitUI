---
import { BaseHead } from "astro-toolkit";

import type { WathqnyConfig as WathqnyConfigType } from "../types/config";

// @ts-ignore
import untypedWathqnyConfig from "/wathqny.config";

const WathqnyConfig: WathqnyConfigType = untypedWathqnyConfig;

export interface Props {
	title?: string | undefined;
	description?: string | undefined;
	OGImage?: {
		src: string;
		alt: string;
	};
	keywords?: string | string[] | undefined;
}

const { title, keywords, description, OGImage } = Astro.props as Props;

const METATITLE = title
	? `${title} - ${WathqnyConfig.siteName}`
	: WathqnyConfig.siteName;
const METAIMAGE = OGImage?.src ?? WathqnyConfig.OGImage?.src;
const METAIMAGEALT = OGImage?.alt ?? WathqnyConfig.OGImage?.alt;
const METADESCRIPTION = description ?? WathqnyConfig.description;
const METAKEYWORDS = keywords ?? [...(WathqnyConfig.keywords || [])];
---

<BaseHead
  title={METATITLE}
  description={METADESCRIPTION}
  keywords={METAKEYWORDS}
  OGImage={{ src: METAIMAGE, alt: METAIMAGEALT }}
  GSVtoken="PVw1xk8LSGGe9WA1CzziS4zL1GXshAvdNn9iksdbmWw"
  robots="index, follow"
  sitemap
  vitePWA
  extend={{
    link: [
      // @ts-expect-error Type '{ href: string; rel?: string; onload?: string; media?: string; as?: string; }[] | undefined' must have a '[Symbol.iterator]()' method that returns an iterator.ts(2488)
      ...WathqnyConfig.css,
      {
        href: '/font/GeistVF.woff2',
        rel: 'preload',
        as: 'font',
        type: 'font/woff2',
        crossorigin: 'anonymous',
      }
    ],
  }}
>
  <script is:inline>
    const root = document.documentElement;

    if (
      localStorage.theme === "dark" ||
      (!("theme" in localStorage) &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      root?.classList.replace("light", "dark");
    } else {
      root?.classList.replace("dark", "light");
    }
  </script>
  <slot />
</BaseHead>
