---
// @ts-ignore
import { pwaInfo } from "virtual:pwa-info";
// @ts-ignore
import { pwaAssetsHead } from "virtual:pwa-assets/head";

import type { WathqnyConfig as WathqnyConfigType } from "wtqtypes";

// @ts-ignore
import untypedWathqnyConfig from "/wathqny.config";

const WathqnyConfig: WathqnyConfigType = untypedWathqnyConfig;

import fruitStyles from "/src/docs.scss?url";
import MainStyles from "../../../wtqdocs/styles/scss/wathqny.scss?url";


export interface Props {
  title?: string | undefined;
  description?: string | undefined;
  OGImage?: string | undefined;
  OGImageAlt?: string | undefined;
  keywords?: string | string[] | undefined;
}

const { title, keywords, description, OGImage, OGImageAlt } =
  Astro.props as Props;

const METATITLE = title
  ? `${title} - ${WathqnyConfig.siteName}`
  : WathqnyConfig.siteName;
const METAIMAGE = OGImage ?? WathqnyConfig.OGImage;
const METAIMAGEALT = OGImageAlt ?? WathqnyConfig.OGImageAlt;
const METADESCRIPTION = description ?? WathqnyConfig.description;
const METAKEYWORDS = keywords ?? [...(WathqnyConfig.keywords || [])];
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{METATITLE}</title>
  <meta name="color-scheme" content="dark light" />
  <link rel="sitemap" href="/sitemap-index.xml" />
  <meta name="keywords" content={METAKEYWORDS as string} />
  <meta name="description" content={METADESCRIPTION} />
  <meta property="og:description" content={METADESCRIPTION} />
  <meta property="og:image" content={METAIMAGE} />
  <meta property="og:image:alt" content={METAIMAGEALT} />
  <meta property="og:title" content={METATITLE} />
  <meta property="og:site_name" content={METATITLE} />
  <meta property="og:type" content="website" />
  <meta property="og:url" content={canonicalURL} />
  <meta name="twitter:title" content={METATITLE} />
  <meta name="twitter:image" content={METAIMAGE} />
  <meta name="twitter:image:alt" content={METAIMAGEALT} />
  <meta name="twitter:description" content={METADESCRIPTION} />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="robots" content="index, follow" />
  <link rel="canonical" href={canonicalURL} />
  <link
    rel="preload"
    href="/font/GeistVariableVF.woff2"
    as="font"
    type="font/woff2"
    crossorigin="anonymous"
  />
  <link href={MainStyles} rel="stylesheet" crossorigin="anonymous" />
  <link href={fruitStyles} rel="stylesheet" crossorigin="anonymous" />
  {
    pwaAssetsHead.themeColor && (
      <meta name="theme-color" content={pwaAssetsHead.themeColor.content} />
    )
  }
  {
    pwaAssetsHead.links.map(
      (
        link: astroHTML.JSX.IntrinsicAttributes &
          astroHTML.JSX.LinkHTMLAttributes
      ) => <link {...link} />
    )
  }
  {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}
  <meta
    name="google-site-verification"
    content="PVw1xk8LSGGe9WA1CzziS4zL1GXshAvdNn9iksdbmWw"
  />
  <meta name="generator" content={Astro.generator} />

  <!-- {
    WathqnyConfig?.css?.map(async (stylesheet) => {
      return (
        <link href={stylesheet} rel="stylesheet" crossorigin="anonymous" />
      );
    })
  } -->

  <script src="/src/pwa.ts"></script>

  

  <script>
    const root = document.documentElement;

    if (
      localStorage.theme === "dark" ||
      (!("theme" in localStorage) &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      root?.classList.replace("light", "dark");
    } else {
      root?.classList.replace("dark", "light");
    }
  </script>

  <slot />
</head>
