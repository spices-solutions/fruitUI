---
import type {
  BuiltinLanguage,
  BuiltinTheme,
  LanguageRegistration,
  SpecialLanguage,
  ThemeRegistration,
  ThemeRegistrationRaw,
} from "shiki";
import { codeToHtml } from "shiki";
import { getHighlighter } from "shiki";

type themeType = BuiltinTheme | ThemeRegistration | ThemeRegistrationRaw;

export interface Props {
  code: string;
  lang?: BuiltinLanguage | SpecialLanguage | LanguageRegistration;
  themes?: {
    light: themeType;
    dark: themeType;
  };
}

const {
  code,
  lang = "plaintext",
  themes = { light: "material-theme-lighter", dark: "material-theme-darker" },
} = Astro.props as Props;

const shiki = await getHighlighter({
  themes: [themes.light, themes.dark],
  langs: [lang],
});

const codeOutput = codeToHtml(code, {
  lang: lang as string,
  themes: {
    light: themes.light,
    dark: themes.dark,
  },
});

const bgLight = shiki.getTheme(themes.light).bg;
const bgDark = shiki.getTheme(themes.dark).bg;
---

<style define:vars={{ bgLight, bgDark }} lang="scss">
  div {
    --bg: var(--bgLight);
    :global(.dark) & {
      --bg: var(--bgDark) !important;
    }
  }
</style>
<div
  style={`font-size: 1em; border-radius: 10px; box-shadow: 0px 12px 15px -3px #00000035;
    margin: 20px 0; background: var(--bg); overflow-x: auto;     padding-inline: 20px;`}>
  <div style={`display: flex;  gap: 10px;  padding-top: 20px; `}>
    <span
      style={`width: 15px; height: 15px; border-radius: 50%; background-color: #ed6b60;`}
    ></span>
    <span
      style={`width: 15px; height: 15px; border-radius: 50%; background-color: #f5be4f;`}
    ></span>
    <span
      style={`width: 15px; height: 15px; border-radius: 50%; background-color: #62c554;`}
    ></span>
  </div>
  <Fragment set:html={codeOutput} />
</div>
