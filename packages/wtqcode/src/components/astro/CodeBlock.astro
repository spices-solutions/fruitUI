---
import {
  type BuiltinLanguage,
  type BuiltinTheme,
  type LanguageRegistration,
  type SpecialLanguage,
  type ThemeRegistration,
  type ThemeRegistrationRaw,
  codeToHtml,
} from "shiki";
import { getHighlighter } from "shiki";

export interface Props {
  code: string;
  lang?: BuiltinLanguage | SpecialLanguage | LanguageRegistration;
  theme?: BuiltinTheme | ThemeRegistration | ThemeRegistrationRaw;
}

const { code, lang = "plaintext", theme = "" } = Astro.props as Props;

const shiki = await getHighlighter({ themes: [theme], langs: [lang] });

const codeOutput = codeToHtml(code, {
  lang: lang as string,
  themes: {
    light: "material-theme-lighter",
    dark: "material-theme-darker",
  },
});

const bg = shiki.getTheme(theme).bg;
---

<style define:vars={{ bg }}></style>
<div
  style={`font-size: 1em; border-radius: 10px;     box-shadow: 0px 12px 15px -3px #00000035;
    margin: 20px 0; background: var(--bg); overflow-x: auto;     padding-inline: 20px;`}>
  <div style={`display: flex;  gap: 10px;  padding-top: 20px; `}>
    <span
      style={`width: 15px; height: 15px; border-radius: 50%; background-color: #ed6b60;`}
    ></span>
    <span
      style={`width: 15px; height: 15px; border-radius: 50%; background-color: #f5be4f;`}
    ></span>
    <span
      style={`width: 15px; height: 15px; border-radius: 50%; background-color: #62c554;`}
    ></span>
  </div>
  <Fragment set:html={codeOutput} />
</div>
