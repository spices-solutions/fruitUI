---
// @ts-ignore
import { pwaAssetsHead } from "virtual:pwa-assets/head";
// @ts-ignore
import { pwaInfo } from "virtual:pwa-info";

export interface Link extends Omit<HTMLLinkElement, "sizes"> {
	prefetch: boolean;
	crossorigin: string;
	sizes: string;
}

export interface Meta extends HTMLMetaElement {
	property: string;
}

export type Props = {
	title?: string | undefined;
	description?: string | undefined;
	OGImage?: {
		src: string | undefined;
		alt: string | undefined;
	};
	keywords?: string | string[] | undefined;
	sitemap?: boolean;
	/**
	 * google-site-verification token
	 */
	GSVtoken: string;
	robots: string;
	vitePWA: boolean;
	extend?: {
		link?: Partial<Link>[];
		meta?: Partial<Meta>[];
	};
};

const {
	title,
	keywords,
	description,
	OGImage,
	sitemap,
	GSVtoken,
	robots,
	vitePWA,
	extend,
} = Astro.props;

const METATITLE = title;
const METAIMAGE = OGImage?.src;
const METAIMAGEALT = OGImage?.alt;
const METADESCRIPTION = description;
const METAKEYWORDS = keywords;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{METATITLE}</title>

  {
    extend?.link?.map((linkTag) => (
      <link {...linkTag} />
    ))
  }

  {
    extend?.meta?.map((metaTag) => (
      <meta {...metaTag} />
    ))
  }

  {sitemap && <link rel="sitemap" href="/sitemap-index.xml" />}

  <meta name="keywords" content={METAKEYWORDS as string} />
  <meta name="description" content={METADESCRIPTION} />
  <meta name="robots" content={robots} />
  <link rel="canonical" href={canonicalURL} />

  <meta property="og:description" content={METADESCRIPTION} />
  <meta property="og:image" content={METAIMAGE} />
  <meta property="og:image:alt" content={METAIMAGEALT} />
  <meta property="og:title" content={METATITLE} />
  <meta property="og:site_name" content={METATITLE} />
  <meta property="og:type" content="website" />
  <meta property="og:url" content={canonicalURL} />
  <meta name="twitter:title" content={METATITLE} />
  <meta name="twitter:image" content={METAIMAGE} />
  <meta name="twitter:image:alt" content={METAIMAGEALT} />
  <meta name="twitter:description" content={METADESCRIPTION} />
  <meta name="twitter:card" content="summary_large_image" />

  <meta name="google-site-verification" content={GSVtoken} />
  <meta name="generator" content={Astro.generator} />
  {
    vitePWA && (
      <>
        {pwaAssetsHead.themeColor && <meta name="theme-color" content={pwaAssetsHead.themeColor.content} />}
        {pwaAssetsHead.links.map((link: astroHTML.JSX.IntrinsicAttributes & astroHTML.JSX.LinkHTMLAttributes) => <link {...link} />)}
        {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}
        <script src="/src/pwa.ts"></script>
        <meta name="color-scheme" content="dark light" />
      </>
    )
  }
  <slot />
<head>
